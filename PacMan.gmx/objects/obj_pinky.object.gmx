<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pinky_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_ghost</parentName>
  <maskName>spr_pacman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define Sprite
sprite_left = spr_pinky_left;
sprite_right = spr_pinky_right;
sprite_up = spr_pinky_up;
sprite_down = spr_pinky_down;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Moving
direction = 0;
speed = MOVEMENT_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI
var target = noone;
//Goes to PacMan
var closest_neighbor = noone;
var closest_distance;
//Get Own Row and Col
var row, col, rc, x_loc, y_loc, xy, neighbors;
rc = scr_row_col(x,y);
row = ds_map_find_value(rc, "row");
col = ds_map_find_value(rc, "col");
//If not in center of square bust out
xy = scr_coordinates(row,col);
x_loc = ds_map_find_value(xy, "x");
y_loc = ds_map_find_value(xy, "y");
if(x != x_loc || y != y_loc){
    exit;
}

//Get Neighbor Paths
neighbors = scr_get_neighbors(row, col);
//Find Path Closest to PacMan
var num_neighbors = ds_list_size(neighbors);
var neighbor;
var distance;
if (!instance_exists(obj_pacman)){
    speed = 0;
    exit;
}
//Target is to leave house when housed
if(state == ghost_states.housed){
    target = instance_place(496,272,obj_path);
}
//Target is pacman if normal
else if(state == ghost_states.normal){
    target = obj_pinky_target;
}

//Target is a random tile if scared
else if(state == ghost_states.scared){
    var index = floor(random(ds_list_size(global.paths)));
    target = ds_list_find_value(global.paths, index);
}
//Target is house when dead
else if(state == ghost_states.dead){
    target = instance_place(512,560,obj_path);
}
if (num_neighbors&gt;0){
    for(i = 0; i &lt; num_neighbors; i++){
        neighbor = ds_list_find_value(neighbors, i);
        distance = point_distance(target.x, target.y, neighbor.x, neighbor.y);
        if((state == ghost_states.normal|| state == ghost_states.scared) &amp;&amp; neighbor.object_index == obj_door){
            continue;
        }
        if (neighbor != previous_square){
            if(closest_neighbor = noone){
                closest_neighbor = neighbor;
                closest_distance = distance;
            }
            else if (distance &lt; closest_distance){
                closest_neighbor = neighbor;
                closest_distance = distance;
            } 
        }
    }
}
//Move to Path
var dx, dy;
dx = sign(closest_neighbor.x-x);
dy = sign(closest_neighbor.y-y);
if(closest_neighbor != noone){
    if(dx&gt;0){
        direction = 0;
    }
    if(dx&lt;0){
       direction = 180;
    }
    if(dy&gt;0){
        direction = 270;
    }
    if(dy&lt;0){
        direction = 90;
    }   
}
speed = MOVEMENT_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
